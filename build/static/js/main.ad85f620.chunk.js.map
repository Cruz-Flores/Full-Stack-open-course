{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","initialNotes","console","log","length","map","find","n","changedNote","returnedNoted","catch","error","setTimeout","onSubmit","event","preventDefault","target","noteObject","Date","toISOString","Math","random","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad85f620.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n    \r\n    return(\r\n      <li className='note'>\r\n        {note.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    ) \r\n  }\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if(message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Notification}","import axios from 'axios';\r\nconst baseUrl = 'api/notes'; //cambiar a api/notes en produccion\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  };\r\n  return request.then((response) => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst noteService = {\r\n  getAll,\r\n  create,\r\n  update,\r\n};\r\n\r\nexport default noteService;\r\n","import React, { useState, useEffect} from 'react'\r\nimport Note from './components/Note.js'\r\nimport { Notification } from './components/Notification.js'\r\nimport noteService from './services/notes'\r\nimport './index.css'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2020 </em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () =>{\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        console.log('button clicked', event.target)\r\n        const noteObject = {\r\n          content: newNote,\r\n          date: new Date().toISOString(),\r\n          important: Math.random() < 0.5,\r\n        }\r\n\r\n        noteService\r\n          .create(noteObject)\r\n          .then(returnedNoted => {\r\n            setNotes(notes.concat(returnedNoted))\r\n            setNewNote('')\r\n          })\r\n    }\r\n\r\n    const handleNoteChange = (event) =>{\r\n        console.log(event.target.value)\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important)\r\n      \r\n    const toggleImportance = (id) => {\r\n      const note = notes.find(n => n.id === id)\r\n      const changedNote = {...note, important : !note.important}\r\n\r\n      noteService\r\n        .update(id, changedNote)\r\n        .then(returnedNoted => {\r\n          setNotes(notes.map(note => note.id !== id ? note : returnedNoted))\r\n        })\r\n        .catch(error => {\r\n          setErrorMessage(\r\n            `Note ${note.content} was already removed from server`\r\n          )\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000);\r\n          setNotes(notes.filter(n => n.id !== id))\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n              setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n    \r\n    console.log('render', notes.length, 'notes')\r\n\r\n    return (\r\n        <div>\r\n          <h1>Notes</h1>\r\n          <Notification message={errorMessage} />\r\n          <div>\r\n            <button onClick={() => setShowAll(!showAll)}>\r\n              show {showAll ? 'important' : 'all'}\r\n            </button>\r\n          </div>\r\n          <ul>\r\n          {notesToShow.map(\r\n            note => (\r\n              <Note \r\n                key={note.id} \r\n                note={note}\r\n                toggleImportance={()=>toggleImportance(note.id)} />\r\n            ))}\r\n          </ul>\r\n          <form onSubmit={addNote}>\r\n            <input \r\n            value={newNote}\r\n            onChange={handleNoteChange} />\r\n            <button type='submit'>save</button>\r\n          </form>\r\n          <Footer />\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n  \r\n    \r\n  \r\n    \r\n  \r\n    \r\n    \r\n    ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}